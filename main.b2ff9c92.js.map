{"version":3,"sources":["main.js"],"names":["nandibus","document","querySelector","keys","Array","from","querySelectorAll","turnon","nandibusWitdh","clientWidth","resizeNandibus","basesize","scale","visualViewport","width","style","transform","window","addEventListener","keyPressSound","getElementById","playSound","paused","play","currentTime","manageKeyPressEvent","lightsAnimation","keyPressedAnimation","forEach","key","e","filter","dataset","keycode","code","classList","add","click","setTimeout","remove","sleep","ms","Promise","resolve","lights","blue","red","yellow","turnOffLights","states","defaultDuration","executeStep","pos","state","action","delay","then","map","active","el","duration","turnOnAnimation","powerButton","helloMessage"],"mappings":";AAGA,IAAMA,EAAWC,SAASC,cAAc,aAClCC,EAAOC,MAAMC,KAAKJ,SAASK,iBAAiB,SAC9CC,GAAS,EAKPC,EAAgBR,EAASS,YAEzBC,EAAiB,WACbC,IACAC,GADWC,eAAeC,MAAQ,KAAOD,eAAeC,MAAQ,IAAM,MACnDN,EAAgB,KACzCR,EAASe,MAAMC,UAAqBJ,SAAAA,OAAAA,EAApC,MAGJF,IACAO,OAAOC,iBAAiB,SAAUR,GAKlC,IAAMS,EAAgBlB,SAASmB,eAAe,mBACxCC,EAAY,WAAMF,OAAAA,EAAcG,OAASH,EAAcI,OAASJ,EAAcK,YAAc,GAE5FC,EAAsB,WACxBJ,IACAK,EAAgBC,EAAqB,MAGzCxB,EAAKyB,QAAQ,SAAAC,GAAOA,OAAAA,EAAIX,iBAAiB,QAASO,KAKlDR,OAAOC,iBAAiB,UAAW,SAAAY,GACzBD,IAAAA,EAAM1B,EAAK4B,OAAO,SAAAF,GAAOA,OAAAA,EAAIG,QAAQC,UAAYH,EAAEI,OAAM,GAE1DL,IAELA,EAAIM,UAAUC,IAAI,SAClBP,EAAIM,UAAUC,IAAI,UAClBP,EAAIQ,QAEJC,WAAW,WACPT,EAAIM,UAAUI,OAAO,WACtB,QAKP,IAAMC,EAAQ,SAAAC,GACH,OAAA,IAAIC,QAAQ,SAAAC,GAAWL,OAAAA,WAAWK,EAASF,MAGhDG,EAAS,CACXC,KAAM5C,SAASC,cAAc,0BAC7B4C,IAAK7C,SAASC,cAAc,yBAC5B6C,OAAQ9C,SAASC,cAAc,6BAG7B8C,EAAgB,WAClBJ,EAAOC,KAAKV,UAAUI,OAAO,QAC7BK,EAAOE,IAAIX,UAAUI,OAAO,QAC5BK,EAAOG,OAAOZ,UAAUI,OAAO,SAG7Bb,EAAkB,SAACuB,EAAQC,GACzB,GAAC3C,EAAD,EAagB,SAAd4C,EAAeC,EAAKH,GAChBI,IAAAA,EAAQJ,EAAOG,GAChBC,GAAU9C,IACf8C,EAAMC,SACNd,EAAMa,EAAME,OAAOC,KAAK,WAAQL,EAAYC,EAAM,EAAGH,MAGzDE,CAAY,EAjBaF,EAAOQ,IAAI,SAAAJ,GACzB,MAAA,CACHC,OAAQ,WACJN,IACAK,EAAMK,OAAO9B,QAAQ,SAAA+B,GAAMA,OAAAA,EAAGxB,UAAUC,IAAI,WAEhDmB,MAAOF,EAAMO,SAAWV,QAc9BW,EAAkB,CACpB,CAAEH,OAAQ,CAAEd,EAAOC,OACnB,CAAEa,OAAQ,CAAEd,EAAOE,MACnB,CAAEY,OAAQ,CAAEd,EAAOG,SACnB,CAAEW,OAAQ,CAAEd,EAAOE,MACnB,CAAEY,OAAQ,CAAEd,EAAOC,OACnB,CAAEa,OAAQ,IACV,CAAEA,OAAQ,CAAEd,EAAOC,KAAMD,EAAOE,IAAKF,EAAOG,SAC5C,CAAEW,OAAQ,IACV,CAAEA,OAAQ,CAAEd,EAAOC,KAAMD,EAAOE,IAAKF,EAAOG,UAG1CpB,EAAsB,CACxB,CAAE+B,OAAQ,IACV,CAAEA,OAAQ,CAAEd,EAAOC,KAAKD,EAAOE,MAC/B,CAAEY,OAAQ,CAAEd,EAAOE,MACnB,CAAEY,OAAQ,CAAEd,EAAOG,SACnB,CAAEW,OAAQ,CAAEd,EAAOE,IAAKF,EAAOC,OAC/B,CAAEa,OAAQ,CAAEd,EAAOE,IAAKF,EAAOC,KAAMD,EAAOG,UAM1Ce,EAAc7D,SAASC,cAAc,UACrC6D,EAAe9D,SAASC,cAAc,kBAE5C4D,EAAY5C,iBAAiB,QAAS,YAClCX,GAAUA,IAGNmB,EAAgBmC,EAAiB,KACjC7D,EAASmC,UAAUC,IAAI,QACvB2B,EAAa5B,UAAUC,IAAI,aAE3BY","file":"main.b2ff9c92.js","sourceRoot":"..","sourcesContent":["\n/* INIT */\n\nconst nandibus = document.querySelector('.nandibus');\nconst keys = Array.from(document.querySelectorAll('.key'));\nlet turnon = false;\n\n\n/* RESIZE NANDIBUS */\n\nconst nandibusWitdh = nandibus.clientWidth;\n\nconst resizeNandibus = () => {\n    const basesize = visualViewport.width < 1200 ? visualViewport.width - 100 : 1200;\n    const scale = basesize / nandibusWitdh - 0.001;\n    nandibus.style.transform = `scale(${scale})`;\n}\n\nresizeNandibus();\nwindow.addEventListener('resize', resizeNandibus);\n\n\n/* ADD SOUND TO KEY PRESS */\n\nconst keyPressSound = document.getElementById('key-press-sound');\nconst playSound = () => keyPressSound.paused ? keyPressSound.play() : keyPressSound.currentTime = 0;\n\nconst manageKeyPressEvent = ()=>{\n    playSound();\n    lightsAnimation(keyPressedAnimation, 100);\n}\n\nkeys.forEach(key => key.addEventListener('click', manageKeyPressEvent ));\n\n\n/* CLICK NANDIBUS KEY ON KEYPRESS */\n\nwindow.addEventListener('keydown', e => {\n    const key = keys.filter(key => key.dataset.keycode === e.code)[0];\n\n    if (!key) { return; }\n\n    key.classList.add('hover');\n    key.classList.add('active');\n    key.click();\n\n    setTimeout(() => {\n        key.classList.remove('active');\n    }, 100);\n});\n\n/* LIGHT ANIMATION */\n\nconst sleep = ms => {\n    return new Promise(resolve => setTimeout(resolve, ms));\n};\n\nconst lights = {\n    blue: document.querySelector('.nandibus-lights .blue'),\n    red: document.querySelector('.nandibus-lights .red'),\n    yellow: document.querySelector('.nandibus-lights .yellow')\n};\n\nconst turnOffLights = () => {\n    lights.blue.classList.remove('--on');\n    lights.red.classList.remove('--on');\n    lights.yellow.classList.remove('--on');\n};\n\nconst lightsAnimation = (states, defaultDuration) => {\n    if (!turnon) { return; }\n\n\n    const stateTransformed = states.map(state => {\n        return { \n            action: () => {\n                turnOffLights();\n                state.active.forEach(el => el.classList.add('--on'));\n            },\n            delay: state.duration | defaultDuration\n        }\n    });\n\n    const executeStep = (pos, states) => {\n        const state = states[pos];\n        if (!state || !turnon) { return; }\n        state.action();\n        sleep(state.delay).then(() => { executeStep(pos + 1, states); });\n    }\n    \n    executeStep(0, stateTransformed);\n};\n\nconst turnOnAnimation = [\n    { active: [ lights.blue ] },\n    { active: [ lights.red ] },\n    { active: [ lights.yellow ] },\n    { active: [ lights.red ] },\n    { active: [ lights.blue ] },\n    { active: [ ] },\n    { active: [ lights.blue, lights.red, lights.yellow ] },\n    { active: [ ] },\n    { active: [ lights.blue, lights.red, lights.yellow ] },\n];\n\nconst keyPressedAnimation = [\n    { active: [ ] },\n    { active: [ lights.blue,lights.red  ] },\n    { active: [ lights.red ] },\n    { active: [ lights.yellow ] },\n    { active: [ lights.red, lights.blue ] },\n    { active: [ lights.red, lights.blue, lights.yellow ] },\n];\n\n\n/* TURN ON AND OFF */\n\nconst powerButton = document.querySelector('.power');\nconst helloMessage = document.querySelector('.hello-message');\n\npowerButton.addEventListener('click', () => {\n    turnon = !turnon;\n\n    if (turnon) {\n        lightsAnimation(turnOnAnimation, 300);\n        nandibus.classList.add('--on');\n        helloMessage.classList.add('--loaded');\n    } else {\n        turnOffLights();\n    }\n});\n"]}